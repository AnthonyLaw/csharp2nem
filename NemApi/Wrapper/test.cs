// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Transaction.Transaction
{

using global::System;
using global::FlatBuffers;

public struct Transaction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Transaction GetRootAsTransaction(ByteBuffer _bb) { return GetRootAsTransaction(_bb, new Transaction()); }
  public static Transaction GetRootAsTransaction(ByteBuffer _bb, Transaction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Transaction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BaseHeader? BHeader { get { int o = __p.__offset(4); return o != 0 ? (BaseHeader?)(new BaseHeader()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public SeconndHeader? SHeader { get { int o = __p.__offset(6); return o != 0 ? (SeconndHeader?)(new SeconndHeader()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public AggregateTransactionSize? AHeader { get { int o = __p.__offset(8); return o != 0 ? (AggregateTransactionSize?)(new AggregateTransactionSize()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public AggregatePartHeader? A2Header { get { int o = __p.__offset(10); return o != 0 ? (AggregatePartHeader?)(new AggregatePartHeader()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<Transaction> CreateTransaction(FlatBufferBuilder builder,
      Offset<BaseHeader> b_HeaderOffset = default(Offset<BaseHeader>),
      Offset<SeconndHeader> s_HeaderOffset = default(Offset<SeconndHeader>),
      Offset<AggregateTransactionSize> a_HeaderOffset = default(Offset<AggregateTransactionSize>),
      Offset<AggregatePartHeader> a2_HeaderOffset = default(Offset<AggregatePartHeader>)) {
    builder.StartObject(4);
    Transaction.AddA2Header(builder, a2_HeaderOffset);
    Transaction.AddAHeader(builder, a_HeaderOffset);
    Transaction.AddSHeader(builder, s_HeaderOffset);
    Transaction.AddBHeader(builder, b_HeaderOffset);
    return Transaction.EndTransaction(builder);
  }

  public static void StartTransaction(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddBHeader(FlatBufferBuilder builder, Offset<BaseHeader> bHeaderOffset) { builder.AddOffset(0, bHeaderOffset.Value, 0); }
  public static void AddSHeader(FlatBufferBuilder builder, Offset<SeconndHeader> sHeaderOffset) { builder.AddOffset(1, sHeaderOffset.Value, 0); }
  public static void AddAHeader(FlatBufferBuilder builder, Offset<AggregateTransactionSize> aHeaderOffset) { builder.AddOffset(2, aHeaderOffset.Value, 0); }
  public static void AddA2Header(FlatBufferBuilder builder, Offset<AggregatePartHeader> a2HeaderOffset) { builder.AddOffset(3, a2HeaderOffset.Value, 0); }
  public static Offset<Transaction> EndTransaction(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Transaction>(o);
  }
  public static void FinishTransactionBuffer(FlatBufferBuilder builder, Offset<Transaction> offset) { builder.Finish(offset.Value); }
};

public struct BaseHeader : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BaseHeader GetRootAsBaseHeader(ByteBuffer _bb) { return GetRootAsBaseHeader(_bb, new BaseHeader()); }
  public static BaseHeader GetRootAsBaseHeader(ByteBuffer _bb, BaseHeader obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BaseHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Signature { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSignatureBytes() { return __p.__vector_as_arraysegment(4); }
  public string Signer { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSignerBytes() { return __p.__vector_as_arraysegment(6); }
  public byte Version { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Type { get { int o = __p.__offset(10); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<BaseHeader> CreateBaseHeader(FlatBufferBuilder builder,
      StringOffset SignatureOffset = default(StringOffset),
      StringOffset SignerOffset = default(StringOffset),
      byte Version = 0,
      byte Type = 0) {
    builder.StartObject(4);
    BaseHeader.AddSigner(builder, SignerOffset);
    BaseHeader.AddSignature(builder, SignatureOffset);
    BaseHeader.AddType(builder, Type);
    BaseHeader.AddVersion(builder, Version);
    return BaseHeader.EndBaseHeader(builder);
  }

  public static void StartBaseHeader(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddSignature(FlatBufferBuilder builder, StringOffset SignatureOffset) { builder.AddOffset(0, SignatureOffset.Value, 0); }
  public static void AddSigner(FlatBufferBuilder builder, StringOffset SignerOffset) { builder.AddOffset(1, SignerOffset.Value, 0); }
  public static void AddVersion(FlatBufferBuilder builder, byte Version) { builder.AddByte(2, Version, 0); }
  public static void AddType(FlatBufferBuilder builder, byte Type) { builder.AddByte(3, Type, 0); }
  public static Offset<BaseHeader> EndBaseHeader(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BaseHeader>(o);
  }
};

public struct SeconndHeader : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SeconndHeader GetRootAsSeconndHeader(ByteBuffer _bb) { return GetRootAsSeconndHeader(_bb, new SeconndHeader()); }
  public static SeconndHeader GetRootAsSeconndHeader(ByteBuffer _bb, SeconndHeader obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SeconndHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong TotalFee { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong Deadline { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<SeconndHeader> CreateSeconndHeader(FlatBufferBuilder builder,
      ulong TotalFee = 0,
      ulong Deadline = 0) {
    builder.StartObject(2);
    SeconndHeader.AddDeadline(builder, Deadline);
    SeconndHeader.AddTotalFee(builder, TotalFee);
    return SeconndHeader.EndSeconndHeader(builder);
  }

  public static void StartSeconndHeader(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTotalFee(FlatBufferBuilder builder, ulong TotalFee) { builder.AddUlong(0, TotalFee, 0); }
  public static void AddDeadline(FlatBufferBuilder builder, ulong Deadline) { builder.AddUlong(1, Deadline, 0); }
  public static Offset<SeconndHeader> EndSeconndHeader(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SeconndHeader>(o);
  }
};

public struct AggregateTransactionSize : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AggregateTransactionSize GetRootAsAggregateTransactionSize(ByteBuffer _bb) { return GetRootAsAggregateTransactionSize(_bb, new AggregateTransactionSize()); }
  public static AggregateTransactionSize GetRootAsAggregateTransactionSize(ByteBuffer _bb, AggregateTransactionSize obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AggregateTransactionSize __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Size { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<AggregateTransactionSize> CreateAggregateTransactionSize(FlatBufferBuilder builder,
      uint Size = 0) {
    builder.StartObject(1);
    AggregateTransactionSize.AddSize(builder, Size);
    return AggregateTransactionSize.EndAggregateTransactionSize(builder);
  }

  public static void StartAggregateTransactionSize(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSize(FlatBufferBuilder builder, uint Size) { builder.AddUint(0, Size, 0); }
  public static Offset<AggregateTransactionSize> EndAggregateTransactionSize(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AggregateTransactionSize>(o);
  }
};

public struct AggregatePartHeader : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AggregatePartHeader GetRootAsAggregatePartHeader(ByteBuffer _bb) { return GetRootAsAggregatePartHeader(_bb, new AggregatePartHeader()); }
  public static AggregatePartHeader GetRootAsAggregatePartHeader(ByteBuffer _bb, AggregatePartHeader obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AggregatePartHeader __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SignerPublicKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSignerPublicKeyBytes() { return __p.__vector_as_arraysegment(4); }
  public byte Version { get { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public byte Type { get { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }

  public static Offset<AggregatePartHeader> CreateAggregatePartHeader(FlatBufferBuilder builder,
      StringOffset SignerPublicKeyOffset = default(StringOffset),
      byte Version = 0,
      byte Type = 0) {
    builder.StartObject(3);
    AggregatePartHeader.AddSignerPublicKey(builder, SignerPublicKeyOffset);
    AggregatePartHeader.AddType(builder, Type);
    AggregatePartHeader.AddVersion(builder, Version);
    return AggregatePartHeader.EndAggregatePartHeader(builder);
  }

  public static void StartAggregatePartHeader(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddSignerPublicKey(FlatBufferBuilder builder, StringOffset SignerPublicKeyOffset) { builder.AddOffset(0, SignerPublicKeyOffset.Value, 0); }
  public static void AddVersion(FlatBufferBuilder builder, byte Version) { builder.AddByte(1, Version, 0); }
  public static void AddType(FlatBufferBuilder builder, byte Type) { builder.AddByte(2, Type, 0); }
  public static Offset<AggregatePartHeader> EndAggregatePartHeader(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AggregatePartHeader>(o);
  }
};

public struct TransactionPart : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TransactionPart GetRootAsTransactionPart(ByteBuffer _bb) { return GetRootAsTransactionPart(_bb, new TransactionPart()); }
  public static TransactionPart GetRootAsTransactionPart(ByteBuffer _bb, TransactionPart obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TransactionPart __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Recipient { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetRecipientBytes() { return __p.__vector_as_arraysegment(4); }
  public uint MessagePayloadSize { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint NumberOfMosaics { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public MessagePayload? Message { get { int o = __p.__offset(10); return o != 0 ? (MessagePayload?)(new MessagePayload()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public Mosaic? Mosaics(int j) { int o = __p.__offset(12); return o != 0 ? (Mosaic?)(new Mosaic()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MosaicsLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<TransactionPart> CreateTransactionPart(FlatBufferBuilder builder,
      StringOffset RecipientOffset = default(StringOffset),
      uint MessagePayloadSize = 0,
      uint NumberOfMosaics = 0,
      Offset<MessagePayload> MessageOffset = default(Offset<MessagePayload>),
      VectorOffset MosaicsOffset = default(VectorOffset)) {
    builder.StartObject(5);
    TransactionPart.AddMosaics(builder, MosaicsOffset);
    TransactionPart.AddMessage(builder, MessageOffset);
    TransactionPart.AddNumberOfMosaics(builder, NumberOfMosaics);
    TransactionPart.AddMessagePayloadSize(builder, MessagePayloadSize);
    TransactionPart.AddRecipient(builder, RecipientOffset);
    return TransactionPart.EndTransactionPart(builder);
  }

  public static void StartTransactionPart(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddRecipient(FlatBufferBuilder builder, StringOffset RecipientOffset) { builder.AddOffset(0, RecipientOffset.Value, 0); }
  public static void AddMessagePayloadSize(FlatBufferBuilder builder, uint MessagePayloadSize) { builder.AddUint(1, MessagePayloadSize, 0); }
  public static void AddNumberOfMosaics(FlatBufferBuilder builder, uint NumberOfMosaics) { builder.AddUint(2, NumberOfMosaics, 0); }
  public static void AddMessage(FlatBufferBuilder builder, Offset<MessagePayload> MessageOffset) { builder.AddOffset(3, MessageOffset.Value, 0); }
  public static void AddMosaics(FlatBufferBuilder builder, VectorOffset MosaicsOffset) { builder.AddOffset(4, MosaicsOffset.Value, 0); }
  public static VectorOffset CreateMosaicsVector(FlatBufferBuilder builder, Offset<Mosaic>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMosaicsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<TransactionPart> EndTransactionPart(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TransactionPart>(o);
  }
};

public struct MessagePayload : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MessagePayload GetRootAsMessagePayload(ByteBuffer _bb) { return GetRootAsMessagePayload(_bb, new MessagePayload()); }
  public static MessagePayload GetRootAsMessagePayload(ByteBuffer _bb, MessagePayload obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MessagePayload __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte MessageType { get { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(o + __p.bb_pos) : (byte)0; } }
  public string Message { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMessageBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<MessagePayload> CreateMessagePayload(FlatBufferBuilder builder,
      byte MessageType = 0,
      StringOffset MessageOffset = default(StringOffset)) {
    builder.StartObject(2);
    MessagePayload.AddMessage(builder, MessageOffset);
    MessagePayload.AddMessageType(builder, MessageType);
    return MessagePayload.EndMessagePayload(builder);
  }

  public static void StartMessagePayload(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMessageType(FlatBufferBuilder builder, byte MessageType) { builder.AddByte(0, MessageType, 0); }
  public static void AddMessage(FlatBufferBuilder builder, StringOffset MessageOffset) { builder.AddOffset(1, MessageOffset.Value, 0); }
  public static Offset<MessagePayload> EndMessagePayload(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MessagePayload>(o);
  }
};

public struct Mosaic : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Mosaic GetRootAsMosaic(ByteBuffer _bb) { return GetRootAsMosaic(_bb, new Mosaic()); }
  public static Mosaic GetRootAsMosaic(ByteBuffer _bb, Mosaic obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Mosaic __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ulong MosaicId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong Amount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }

  public static Offset<Mosaic> CreateMosaic(FlatBufferBuilder builder,
      ulong MosaicId = 0,
      ulong Amount = 0) {
    builder.StartObject(2);
    Mosaic.AddAmount(builder, Amount);
    Mosaic.AddMosaicId(builder, MosaicId);
    return Mosaic.EndMosaic(builder);
  }

  public static void StartMosaic(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMosaicId(FlatBufferBuilder builder, ulong MosaicId) { builder.AddUlong(0, MosaicId, 0); }
  public static void AddAmount(FlatBufferBuilder builder, ulong Amount) { builder.AddUlong(1, Amount, 0); }
  public static Offset<Mosaic> EndMosaic(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Mosaic>(o);
  }
};


}
